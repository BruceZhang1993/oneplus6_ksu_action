name: Build LineageOS Kernel with SukiSU Ultra
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        SUSFS: [true, false]
        KPM: [true, false]
        ZRAM: [true, false]
      fail-fast: false

    name: "Build Kernel (SuSFS: ${{ matrix.SUSFS }}, KPM: ${{ matrix.KPM }}, ZRAM: ${{ matrix.ZRAM }})"

    steps:
      - name: 配置 Git
        run: |
          git config --global user.name "Bruce Zhang"
          git config --global user.email "zttt183525594@gmail.com"

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi
          sudo apt-get install binutils make python3 libssl-dev build-essential bc bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs wget gzip

      - name: 设置 ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G

      - name: 拉取仓库
        uses: actions/checkout@v4
        with:
          ref: master
          path: repo

      - name: 拉取内核源码
        uses: actions/checkout@v4
        with:
          repository: LineageOS/android_kernel_oneplus_sdm845
          ref: lineage-22.2
          path: kernel_workspace/kernel_platform

      - name: 删除内核 -dirty 后缀
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: 添加 SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s nongki
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: 应用内核补丁
        run: |
          cd kernel_workspace/kernel_platform
          patch -p1 < ../../repo/syshook.patch
          patch -p1 < ../../repo/selinux-fix.patch

      - name: 应用 SUSFS 补丁
        if: ${{ matrix.SUSFS == 'true' }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.9
          cd kernel_platform
          echo "== 正在应用 SUSFS 补丁 =="
          cp ../susfs4ksu/kernel_patches/fs/susfs.c ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/susfs.h ./include/linux/
          cp ../susfs4ksu/kernel_patches/include/linux/susfs_def.h ./include/linux/
          cp ../susfs4ksu/kernel_patches/fs/sus_su.c ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/sus_su.h ./include/linux/
          patch -p1 < ../../repo/susfs-kernel.patch
          echo "完成"

      - name: 应用 KPM 补丁
        if: ${{ matrix.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          wget 'https://raw.githubusercontent.com/MediaTek-Labs/common-kernel-4.19/refs/heads/master/include/linux/set_memory.h' -O include/linux/set_memory.h
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          patch -p1 < ../../repo/kpm.patch

      - name: 应用 SukiSU 修补
        if: ${{ matrix.SUSFS == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/KernelSU
          echo "== 正在应用 SukiSU 修补 =="
          patch -p1 < ../../../repo/susfs-ksu.patch
          echo "完成"

      - name: 应用隐藏应用补丁
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
      
      - name: 应用 ZRAM 补丁
        if: ${{ matrix.ZRAM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          cp -r ../../repo/zram/include/* ./include/linux/
          cp -r ../../repo/zram/crypto/* ./crypto/
          cp -r ../../repo/zram/lib/lz4kd/ ./lib/
          patch -p1 < ../../repo/zram/zram.patch

      # 配置信息
      - name: 增加内核配置
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./arch/arm64/configs/enchilada_defconfig
          KERNEL_VERSION=4.9

          # SukiSU Ultra config
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ matrix.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "CONFIG_KALLSYMS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KALLSYMS_ALL=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KPM=n" >> "$CONFIG_FILE"
          fi
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          # ZRAM config
          if [ "${{ matrix.ZRAM }}" = "true" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
            echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ matrix.SUSFS }}" = "true" ]; then
            # SUSFS config
            echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          fi

      - name: 下载 clang 编译器
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
          tar xf clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz

      - name: 构建内核
        run: |
          export PATH=$(pwd)/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/:$PATH
          cd kernel_workspace/kernel_platform
          make O=out $KERNEL_DEFCONFIG
          make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1
        env:
          KERNEL_DEFCONFIG: "enchilada_defconfig"
          ARCH: arm64
          SUBARCH: arm64

      - name: 下载 AnyKernel3 模板
        uses: actions/checkout@v4
        with:
          repository: osm0sis/AnyKernel3
          ref: master
          path: AnyKernel3

      - name: 写入内核
        run: |
          cd kernel_workspace/kernel_platform
          mv out/arch/arm64/boot/Image.gz-dtb Image.gz-dtb

      - name: 应用 KPM
        if: ${{ matrix.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_linux
          chmod +x patch_linux
          mv Image.gz-dtb Image.gz
          gzip -d Image.gz || true
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: 配置 AnyKernel3
        run: |
          if [ "${{ matrix.KPM }}" = "true" ]; then
            cp $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/Image $GITHUB_WORKSPACE/AnyKernel3/Image
          else
            cp $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/Image.gz-dtb $GITHUB_WORKSPACE/AnyKernel3/Image.gz-dtb
          fi
          cd $GITHUB_WORKSPACE/AnyKernel3
          rm anykernel.sh
          cp -f ../repo/anykernel.sh .

      - name: 生成包名
        run: |
          KSU_VERSION=$(echo $KSU_VERSION)
          DATE=$(date +'%y%m%d')
          if [ "${{ matrix.SUSFS }}" = "true" ]; then
            SUSFS_TAG="SuSFS"
          else
            SUSFS_TAG="NoSuSFS"
          fi
          if [ "${{ matrix.KPM }}" = "true" ]; then
            KPM_TAG="KPM"
          else
            KPM_TAG="NoKPM"
          fi
          if [ "${{ matrix.ZRAM }}" = "true" ]; then
            ZRAM_TAG="ZRAM"
          else
            ZRAM_TAG="NoZRAM"
          fi
          PACKAGE_NAME="Lineage_OnePlus6_SukiSU_${KSU_VERSION}_${SUSFS_TAG}_${KPM_TAG}_${ZRAM_TAG}_${DATE}"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        env:
          KSU_VERSION: ${{ env.KSU_VERSION }}

      - name: 上传内核包
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ./AnyKernel3/*
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
